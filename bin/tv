#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'download_tv'

options = {}
options[:offset] = 0
options[:dry] = false
options[:cmd] = 'run'
config = {}

opt_parser = OptionParser.new do |opts|
  opts.banner = 'Usage: tv [options]'

  opts.separator ''
  opts.separator 'Specific options:'

  opts.on('-o', '--offset OFFSET', Integer, 'Move back the last run offset') do |o|
    options[:offset] = o
  end

  opts.on('-f', '--file PATH', 'Download shows from a file') do |f|
    options[:cmd] = 'file'
    options[:arg] = f
  end

  opts.on('-d', '--download SHOW', 'Downloads given show') do |s|
    options[:cmd] = 'dl'
    options[:arg] = s
  end

  opts.on('-s', '--season SEASON', 'Limit the show download to a specific season') do |s|
    options[:cmd] = 'dl'
    options[:season] = s
  end

  opts.on('-t', '--tomorrow', 'Download shows airing today') do |s|
    options[:cmd] = 'tomorrow'
  end

  opts.on('-c', '--configure', 'Configures defaults') do
    options[:cmd] = 'config'
  end

  opts.on('--show-config', 'Show current configuration values') do
    options[:cmd] = 'showconfig'
  end

  opts.on('--dry-run', "Don't update the persisted configuration") do |n|
    options[:dry] = n
  end

  opts.on('-a', '--[no-]auto', 'Automatically find links') do |n|
    config[:auto] = n
  end

  opts.on('-g', '--grabber GRABBER', 'Use given grabber as first option') do |g|
    config[:grabber] = g
  end

  opts.on('--show-grabbers', 'List available grabbers') do
    puts DownloadTV::Torrent.grabbers
    exit
  end

  opts.on('-p', '--pending', 'Show list of pending downloads') do
    options[:cmd] = 'showpending'
  end

  opts.on('--clear-pending', 'Clear list of pending downloads') do
    options[:cmd] = 'clearpending'
  end

  opts.on('-q', '--queue SHOW', 'Add show episode to pending downloads list') do |s|
    options[:cmd] = 'queue'
    options[:arg] = s
  end

  opts.on('-v', '--version', 'Print version') do
    puts DownloadTV::VERSION
    exit
  end

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit
  end
end

begin
  opt_parser.parse!(ARGV)
rescue OptionParser::InvalidOption => e
  warn e.message
  puts opt_parser.help
  exit 1
end

begin
  case options[:cmd]
  when 'run'
    dl = DownloadTV::Downloader.new(config)
    dl.run(options[:dry], options[:offset].abs)
  when 'dl'
    if options[:arg]
      dl = DownloadTV::Downloader.new(config)
      dl.download_single_show(options[:arg], options[:season])
    else
      warn 'You must use the season option with the -d option'
    end
  when 'file'
    dl = DownloadTV::Downloader.new(config)
    dl.download_from_file(options[:arg])
  when 'tomorrow'
    dl = DownloadTV::Downloader.new(config)
    dl.run(options[:dry], options[:offset].abs, include_tomorrow: true)
  when 'config'
    DownloadTV::Configuration.new(config).change_configuration
  when 'showconfig'
    puts DownloadTV::Configuration.new(config)
  when 'showpending'
    puts DownloadTV::Configuration.new(config)[:pending]
  when 'clearpending'
    DownloadTV::Configuration.new(config).clear_pending
  when 'queue'
    DownloadTV::Configuration.new(config).queue_pending(options[:arg])
  end
rescue Interrupt
  puts 'Interrupt signal detected. Exiting...'
  exit 1
rescue SocketError, Errno::ECONNRESET, Net::OpenTimeout, Net::ReadTimeout
  warn 'Connection error.'
  exit 1
end
